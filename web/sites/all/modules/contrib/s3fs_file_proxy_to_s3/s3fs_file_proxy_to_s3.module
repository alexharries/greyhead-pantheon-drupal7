<?php

/**
 * Implements hook_stream_wrappers_alter().
 *
 * If configured to do so, s3fs_file_proxy_to_s3 takes control of the public://
 * stream wrapper.
 */
function s3fs_file_proxy_to_s3_stream_wrappers_alter(&$wrappers) {
  $config = _s3fs_get_config();
  if (!empty($config['use_s3_for_public'])) {
    $wrappers['public'] = array(
      'name' => t('Public files (s3fs)'),
      'class' => 'S3fsFileProxyToS3StreamWrapper',
      'description' => t('Public files served from Amazon S3.'),
      'type' => STREAM_WRAPPERS_NORMAL,
    );
  }
}

/**
 * Implements hook_menu().
 */
function s3fs_file_proxy_to_s3_menu() {
  $items = array();

  // A custom version of system/files/styles/%image_style, based on how the
  // core Image module creates image styles with image_style_deliver().
  $items['s3fs_to_s3/files/%'] = array(
    'title' => 'Generate image style in S3',
    'page callback' => '_s3fs_file_proxy_to_s3_file_router',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Router that fetch the files from remote environment if it's necessary.
 */
function _s3fs_file_proxy_to_s3_file_router() {
  if (drupal_is_cli()) {
    return;
  }

  $menu = menu_get_item();
  $route_path = str_replace('%', '', $menu['path']);
  $pieces = explode($route_path, $_GET['q']);

  if (isset($pieces[1])) {
    $path = $pieces[1];
    $wrapper = file_stream_wrapper_get_instance_by_scheme('s3');
    $wrapper->setUri("public://$path");
    $url = $wrapper->getExternalUrl();

    if ($uri = _s3fs_file_proxy_to_s3_get_current_file_uri($url)) {
      s3fs_file_proxy_to_s3_process_file_uri($uri);

      $wrapper->setUri($uri);
      $url = $wrapper->getExternalUrl();

      $request_url_info = drupal_parse_url($_SERVER['REQUEST_URI']);
      $url = !(empty($request_url_info['query']))
        ? $url . '?' . drupal_http_build_query($request_url_info['query'])
        : $url;

      header("Location: " . $url);
      exit;
    }
  }
  else {
    drupal_not_found();
  }
}

/**
 * @param $uri
 *
 * @return bool|string
 *
 * @see _stage_file_proxy_get_current_file_uri()
 */
function _s3fs_file_proxy_to_s3_get_current_file_uri($uri) {
  // Check if is Amazon file, for this we get first the file directory.
  $file_dir = variable_get('s3fs_public_folder', conf_path() . '/files') . '/';
  $file_pieces = explode($file_dir, $uri);

  // If it isn't Amazon file, we check if it's image style from Amazon that
  // use an intermediate callback s3/files.
  if (!isset($file_pieces[1])) {
    $s3_style_dir = 's3/files/';
    $s3_style_pieces = explode($s3_style_dir, $uri);

    if (!isset($s3_style_pieces[1])) {
      return FALSE;
    }
    else {
      $file_path = $s3_style_pieces[1];
    }
  }
  else {
    $file_path = $file_pieces[1];
  }

  $options = drupal_parse_url($file_path);
  return 'public://' . $options['path'];
}

/**
 * @param $uri
 *
 * @return bool|string
 *
 * @see stage_file_proxy_process_file_uri()
 */
function s3fs_file_proxy_to_s3_process_file_uri($uri) {
  // Prevent this function from being accidentally interpreted as a theme
  // process hook (in which case the first parameter would be an array).
  if (!is_string($uri)) {
    return FALSE;
  }

  if (file_uri_scheme($uri) === 'public' && !is_file($uri)) {
    // If this is a advagg path, ignore it.
    if (strpos($uri, '/advagg_') !== FALSE && module_exists('advagg')) {
      return FALSE;
    }

    $relative_path = file_uri_target($uri);
    if ($proxy_url = stage_file_proxy_get_file_remote_url($relative_path)) {
      // Check if hotlinking is enabled.
      if (variable_get('stage_file_proxy_hotlink', FALSE)) {
        return $proxy_url;
      }

      // Is this imagecache? Request the root file and let imagecache resize.
      if (variable_get('stage_file_proxy_use_imagecache_root', TRUE) && $original_path = _stage_file_proxy_image_style_path_original($relative_path, TRUE)) {
        if (is_file($original_path)) {
          // image_style_deliver() can generate the derivative since the
          // source file exists.
          return FALSE;
        }
        else {
          // Attempt to download the source of the requested derivative image.
          // Do not change the file's URL since we want to still direct the
          // user to the image style derivative, instead of the source image.
          return s3fs_file_proxy_to_s3_fetch_file(file_uri_target($original_path));
        }
      }

      if ($local = s3fs_file_proxy_to_s3_fetch_file($relative_path)) {
        // If the file was downloaded successfully, then set the path to the
        // now local version of the file. This result is different since it
        // will not include the public:// scheme prefix.
        return $local;
      }
    }
  }

  return FALSE;
}

/**
 * Downloads a public file from the origin site.
 *
 * @param string $relative_path
 *   The path to the requested resource relative to the files directory.
 * @param array $options
 *   Additional options to pass through to url().
 *
 * @return string|bool
 *   Returns the local path if the remote file was downloaded successfully, or
 *   FALSE otherwise.
 *
 * @see stage_file_proxy_fetch_file()
 */
function s3fs_file_proxy_to_s3_fetch_file($relative_path, array $options = array()) {
  $failures = &drupal_static(__FUNCTION__);

  if (!isset($failures)) {
    $failures = array();
    if ($cache = cache_get('stage_file_proxy_fetch_url_failures')) {
      $failures = $cache->data;
    }
  }

  $url = stage_file_proxy_get_file_remote_url($relative_path, $options);

  if (!empty($failures[$url])) {
    return FALSE;
  }

  $destination = 'public://';
  if (dirname($relative_path) != '.' ) {
    $destination .= dirname($relative_path);
  }

  if (!file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    watchdog('s3fs_file_proxy_to_s3', 'Unable to prepare local directory @path.', array('@path' => $destination), WATCHDOG_ERROR);
    return FALSE;
  }

  if (dirname($relative_path) != '.' ) {
    $destination .= '/';
  }
  $destination .= drupal_basename($relative_path);

  $result = drupal_http_request($url);
  if ($result->code != 200) {
    watchdog('s3fs_file_proxy_to_s3', 'HTTP error @errorcode occurred when trying to fetch @remote.', array('@errorcode' => $result->code, '@remote' => $url), WATCHDOG_ERROR);
    $failures[$url] = TRUE;
    cache_set('stage_file_proxy_failures', $failures, 'cache', CACHE_TEMPORARY);
    return FALSE;
  }

  if (file_put_contents($destination, $result->data) === FALSE) {
    watchdog('s3fs_file_proxy_to_s3', '@remote could not be saved to @path.', array('@remote' => $url, '@path' => $destination), WATCHDOG_ERROR);
    return FALSE;
  }

  return $destination;
}
