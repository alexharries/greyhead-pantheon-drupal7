diff --git a/acton.admin.inc b/acton.admin.inc
index 6dd9f36..b62b174 100644
--- a/acton.admin.inc
+++ b/acton.admin.inc
@@ -16,13 +16,25 @@ function acton_admin_form($form, &$form_state) {
     '#collapsible' => TRUE,
     '#collapsed' => FALSE,
   );
-  $form['configuration']['acton_url'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Act-On Post Url'),
-    '#description' => t("The url of the Act-On software."),
-    '#default_value' => variable_get('acton_url', ''),
-    '#required' => TRUE,
-    '#size' => 60,
+  #$form['configuration']['acton_url'] = array(
+  #  '#type' => 'textfield',
+  #  '#title' => t('Act-On Post Url'),
+  #  '#description' => t("The url of the Act-On software."),
+  #  '#default_value' => variable_get('acton_url', ''),
+  #  '#required' => TRUE,
+  #  '#size' => 60,
+  #);
+
+  $form['configuration']['add_url'] = array(
+    '#type'  => 'textfield',
+    '#description' => t("A post url configured on Act-On software."),
+    '#title' => 'Post URL',
+  );
+
+  $form['configuration']['submit_add_url'] = array(
+    '#type'   => 'submit',
+    '#value'  => 'Add',
+    '#submit' => array('acton_add_url_submit'),
   );
 
   $form['configuration']['acton_debug'] = array(
@@ -32,107 +44,288 @@ function acton_admin_form($form, &$form_state) {
     '#default_value' => variable_get('acton_debug', 0),
   );
 
-  $form['configuration']['acton_capture_all_forms'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Enable all forms with Act-On'),
-    '#description' => t('Enable Act-On for ALL forms on this site (it is best to only enable Act-On for the forms you need below).'),
-    '#default_value' => variable_get('acton_capture_all_forms', 0),
+  // populate post url and webform list
+  $form['post_url_fieldset'] = array(
+    '#type'         => 'fieldset',
+    '#title'        => t('Act-On Post Urls'),
+    '#collapsible'  => TRUE,
   );
+  acton_post_urls($form);
 
-  //Act-On Enabled forms.
-  $form['enabled_forms'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Act-On Enabled Forms'),
-    '#description' => t("Check the boxes next to individual forms on which you'd like Act-On enabled."),
-    '#collapsible' => TRUE,
-    '#collapsed' => FALSE,
-    '#states' => array(
-      // Hide this fieldset when all forms are captured.
-      'invisible' => array(
-        'input[name="acton_capture_all_forms"]' => array('checked' => TRUE),
-      ),
-    ),
-  );
+  return system_settings_form($form);
+}
 
-  // Generic forms.
-  $form['enabled_forms']['general_forms'] = array('#markup' => '<h5>' . t('General Forms') . '</h5>');
-  // User register form.
-  $form['enabled_forms']['acton_form_user_register_form'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('User Registration form'),
-    '#default_value' => variable_get('acton_form_user_register_form', 0),
-  );
-  // User password form.
-  $form['enabled_forms']['acton_form_user_pass'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('User Password Reset form'),
-    '#default_value' => variable_get('acton_form_user_pass', 0),
-  );
+/**
+ * acton_post_urls()
+ * @description
+ *  get the configured post urls from the database
+ * @param &$form
+ */
+function acton_post_urls(&$form) {
+  $result = db_select('acton_post_url', 'pu')
+              ->fields('pu')
+              ->execute();
+  
+  // make a field set for each row and allow url adding
+  while ($row = $result->fetchAssoc()) {
+    $form['post_url_fieldset']['url_'.$row['id'].'_fieldset'] = array(
+      '#type' => 'fieldset',
+      '#attributes' => array('style'=>'background:#f1f1f1;'),
+      '#title'   => t('post url'),
+      '#collapsible' => False,
+      '#collapsed' => False,
+    );
 
-  // If webform.module enabled, add webforms.
-  if (module_exists('webform')) {
-    $form['enabled_forms']['acton_form_webforms'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Webforms (all)'),
-      '#default_value' => variable_get('acton_form_webforms', 0),
+    $form['post_url_fieldset']['url_'.$row['id'].'_fieldset']['url'] = array(
+      '#markup'  => "<div><em>" . $row['url'] . "</em></div>",
     );
-  }
 
-  // If contact.module enabled, add contact forms.
-  if (module_exists('contact')) {
-    $form['enabled_forms']['contact_forms'] = array('#markup' => '<h5>' . t('Contact Forms') . '</h5>');
-    // Sitewide contact form.
-    $form['enabled_forms']['acton_form_contact_site_form'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Sitewide Contact form'),
-      '#default_value' => variable_get('acton_form_contact_site_form', 0),
+    // Show a list of added webforms
+    $form['post_url_fieldset']['url_'.$row['id'].'_fieldset']['webform_fieldset'] = array(
+      '#type'         => 'fieldset',
+      '#title'        => 'Webforms',
+      '#collapsible'  => True,
+      '#collapsed'    => True,
     );
-    // Sitewide personal form.
-    $form['enabled_forms']['acton_form_contact_personal_form'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Personal Contact forms'),
-      '#default_value' => variable_get('acton_form_contact_personal_form', 0),
+    if ($options = acton_webforms_checkbox_options($row['id'])) {
+      $form['post_url_fieldset']['url_'.$row['id'].'_fieldset']['webform_fieldset']['webforms'] = array(
+        '#type'     => 'tableselect',
+        '#header'   => array('webform'),
+        '#options'  => $options,
+      );
+      $form['post_url_fieldset']['url_'.$row['id'].'_fieldset']['webform_fieldset']['delete_webforms'] = array(
+        '#type'   => 'submit',
+        '#submit' => array('acton_delete_webforms'),
+        '#value'  => t('Delete'),
+        '#name'   => 'delete_webform_' . $row['id'],
+      );
+    }
+
+    /// Select box of available webforms
+    $form['post_url_fieldset']['url_'.$row['id'].'_fieldset']['webform_fieldset']['add_new'] = array(
+      '#type'     => 'select',
+      '#options'  => acton_build_webform_options(), 
+      '#title'    => t('Add Webform'),
+    );
+    $form['post_url_fieldset']['url_'.$row['id'].'_fieldset']['webform_fieldset']['submit'] = array(
+      '#type'   => 'submit',
+      '#submit' => array('acton_add_webform_submit'),
+      '#value'  => t('Submit'),
+      '#name'   => 'add_webform_' . $row['id'],
+    );
+    $form['post_url_fieldset']['url_'.$row['id'].'_fieldset']['delete'] = array(
+      '#type'   => 'submit',
+      '#submit' => array('acton_delete_post_url'),
+      '#name'   => 'delete_post_url_' . $row['id'],
+      '#value'  => t('Delete Post URL'),
     );
   }
 
-  // If profile.module enabled, add profile forms.
-  if (module_exists('profile')) {
-    $form['enabled_forms']['profile_forms'] = array('#value' => '<h5>' . t('Profile Forms') . '</h5>');
-    $form['enabled_forms']['acton_form_user_profile_form'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Profile forms (all)'),
-      '#default_value' => variable_get('acton_form_user_profile_form', 0),
+  if (count($form['post_url_fieldset']) <= 3) {
+    $form['post_url_fieldset']['message'] = array(
+      '#markup' => '<span><em>Add some post urls...</em></span>'
     );
   }
 
-  // Get node types for node forms and node comment forms.
-  $types = node_type_get_types();
-  if (!empty($types)) {
-    // Node forms.
-    $form['enabled_forms']['node_forms'] = array('#markup' => '<h5>' . t('Node Forms') . '</h5>');
-    foreach ($types as $type) {
-      $id = 'acton_form_' . $type->type . '_node_form';
-      $form['enabled_forms'][$id] = array(
-        '#type' => 'checkbox',
-        '#title' => t('@name node form', array('@name' => $type->name)),
-        '#default_value' => variable_get($id, 0),
+}
+
+/**
+ * acton_webforms_checkbox_options()
+ * @description
+ *  return a list of checkbox options for webforms
+ *  associated to specified post url.
+ * @param Integer $id
+ *  the Post URL ID
+ */
+function acton_webforms_checkbox_options($id) {
+  $options = array();
+  $webforms = acton_get_webforms_by_post_id($id);
+  if (count($webforms)) {
+    foreach($webforms as $webform) {
+      $options[$webform->nid] = array(
+        $webform->title,
       );
     }
+  }
+  return $options;
+}
 
-    // Comment forms.
-    if (module_exists('comment')) {
-      $form['enabled_forms']['comment_forms'] = array('#markup' => '<h5>' . t('Comment Forms') . '</h5>');
-      foreach ($types as $type) {
-        $id = 'acton_form_comment_node_' . $type->type . '_form';
-        $form['enabled_forms'][$id] = array(
-          '#type' => 'checkbox',
-          '#title' => t('@name comment form', array('@name' => $type->name)),
-          '#default_value' => variable_get($id, 0),
-        );
+/**
+ * acton_delete_webforms()
+ * @description
+ *  deletes selected webforms on the currently selected Post URL.
+ * @param Array &$form
+ * @param Array &$form_state
+ */
+function acton_delete_webforms(&$form, &$form_state) {
+  foreach($form_state['values'] as $key=>$val) {
+    preg_match('/delete_webform_([0-9])+/', $key, $matches);
+    // find out which post url we're deleting from
+    if (!empty($matches[1])) {
+      $post_url_id = $matches[1];
+      if (!empty($form_state['values']['webforms'])) {
+        $webforms = $form_state['values']['webforms'];
+        foreach($webforms as $key=>$val) {
+          if($key == $val) {
+            db_delete('acton_drupal_webforms') 
+              ->condition('url_id', $post_url_id, '=')
+              ->condition('nid', $val, '=')
+              ->execute();
+          }
+        }
       }
+      break;
     }
   }
-  
+}
 
-  return system_settings_form($form);
+/**
+ * acton_delete_post_url()
+ * @description
+ *  deletes a post url and all associated child webform
+ *  references.
+ * @param Array &$form
+ * @param Array &$form_state
+ */
+function acton_delete_post_url(&$form, &$form_state) {
+  foreach($form_state['values'] as $key=>$val) {
+    preg_match('/delete_post_url_([0-9])+/', $key, $matches);
+    // find out which post url we're deleting
+    if (!empty($matches[1])) {
+      $post_url_id = $matches[1];
+      # delete the post url
+      db_delete('acton_post_url')
+        ->condition('id', $post_url_id)
+        ->execute();
+      # delete child webforms
+      db_delete('acton_drupal_webforms')
+        ->condition('url_id', $post_url_id)
+        ->execute();
+    }
+  }
+}
+
+/**
+ * acton_build_webform_options()
+ * @description
+ *  return select input options with all available
+ *  webforms.
+ */
+function acton_build_webform_options() {
+  $options = array(0 => '-- select --');
+  $nids = db_select('node', 'n')
+    ->fields('n', array('nid'))
+    ->condition('type', 'webform', '=')
+    ->execute()
+    ->fetchCol();
+
+  $webforms = node_load_multiple($nids);
+
+  foreach($webforms as $webform) {
+    $options[$webform->nid] = $webform->title;
+  }
+
+  return $options;
+}  
+
+/**
+ * acton_get_webforms_by_post_id().
+ * @description
+ *  get an array of webforms associated with a Post URL
+ * @param Array &$form
+ * @param Array &$form_state
+ */
+function acton_get_webforms_by_post_id($id) {
+  $webforms = array();
+  $data = db_select('acton_drupal_webforms', 'wf')
+  ->fields('wf')
+  ->condition('url_id', $id, '=')
+  ->execute()
+  ->fetchAll();
+
+  foreach($data as $row) {
+    $webforms[] = node_load($row->nid);
+  }
+
+  return $webforms;
+}
+
+/**
+ * acton_add_webform_submit().
+ * @description
+ *  handles submitting a new webform to an existing
+ *  Post ULrl
+ * @param Array &$form
+ * @param Array &$form_state
+ */
+function acton_add_webform_submit(&$form, &$form_state) {
+  foreach($form_state['values'] as $key=>$val) {
+    preg_match('/add_webform_([0-9])+/', $key, $matches);
+    // find out which post url we're adding to
+    if (!empty($matches[1])) {
+      $post_url_id = $matches[1];
+      $webform_nid =  $form_state['values']['add_new'];
+      // selected webform required
+      if ($webform_nid) {
+        // check the entry doesn't exist first
+        $exists = db_select('acton_drupal_webforms', 'wf')
+          ->fields('wf')
+          ->condition('nid', $webform_nid, '=')
+          ->condition('url_id', $post_url_id, '=')
+          ->execute()
+          ->fetchCol();
+        // build if no existing entry
+        if (!count($exists)) {
+          db_insert('acton_drupal_webforms')
+            ->fields(array(
+              'nid'     => $webform_nid,
+              'url_id'  => $post_url_id,))
+            ->execute();
+          drupal_set_message('Webform added to Post URL');
+        }
+        else {
+          form_set_error('form', 'The webform has already been added to this Post URL');
+        }
+      }
+      else {
+        form_set_error('form', 'You must select a webform to add');
+      }
+      break;
+    }
+  }
+}
+
+
+/**
+ * acton_add_url_submit().
+ * @description
+ *  handles submitting a new acton url
+ * @param Array &$form
+ * @param Array &$form_state
+ */
+function acton_add_url_submit(&$form, &$form_state) {
+  $url         = filter_xss($form_state['values']['add_url']);
+  $error       = FALSE;
+
+  if (empty($url)) {
+    form_set_error('form', 'A Post URL is required when adding a new URL');
+    return;
+  }
+
+  $existing_url = db_select('acton_post_url', 'pu')
+    ->fields('pu')
+    ->condition('url', $url, '=')
+    ->execute()
+    ->fetchAssoc();
+
+  if (!$existing_url) {
+    db_insert('acton_post_url')
+      ->fields(array(
+        'url' => $url))
+      ->execute();
+    drupal_set_message('New Post URL Added');
+    return;
+  }
+
+  form_set_error('form', 'This URL has already been added!');
 }
diff --git a/acton.inc b/acton.inc
index 384d829..6a08376 100644
--- a/acton.inc
+++ b/acton.inc
@@ -52,6 +52,8 @@ class ActonConnection
   {
     $this->setPostItems('_ipaddr', $this->getUserIP()); // Act-On accepts manually defined IPs if using field name '_ipaddr'
     $fields = http_build_query($this->getPostItems()); // encode post items into query-string
+    dpm($fields);
+    return;
     $handle = curl_init();
     curl_setopt($handle, CURLOPT_POST, 1);
     curl_setopt($handle, CURLOPT_URL, "$extPostUrl");
@@ -76,4 +78,4 @@ class ActonConnection
     curl_close($handle);
   }
 
-}
\ No newline at end of file
+}
diff --git a/acton.info b/acton.info
index 72e3e86..68cefd6 100644
--- a/acton.info
+++ b/acton.info
@@ -7,3 +7,4 @@ configure = admin/config/services/act-on
 files[] = acton.inc
 files[] = acton.module
 files[] = acton.admin.inc
+files[] = acton.install
diff --git a/acton.install b/acton.install
new file mode 100644
index 0000000..91704c5
--- /dev/null
+++ b/acton.install
@@ -0,0 +1,97 @@
+<?php
+/**
+ * @name iats_acton.install
+ */
+
+/**
+ * Implements hook_uninstall().
+ */
+function acton_uninstall() {
+  drupal_uninstall_schema('iats_acton');
+}
+
+/**
+ * Implements hook_install().
+ */
+function acton_install() {
+  if (db_table_exists('acton_post_url') == FALSE && db_table_exists('acton_drupal_webforms') == FALSE && db_table_exists('action_post_mapping') == FALSE) {
+    drupal_install_schema('iats_acton');
+  }
+}
+
+/**
+ * Implements hook_enable().
+ */
+function acton_enable() {
+  if (db_table_exists('acton_post_url') == FALSE && db_table_exists('acton_drupal_webforms') == FALSE && db_table_exists('action_post_mapping') == FALSE) {
+    drupal_install_schema('iats_acton');
+  }
+}
+
+/**
+ * Implements hook_schema().
+ */
+function acton_schema() {
+
+  // Post URLs
+  $schema['acton_post_url'] = array(
+    'description' => 'Post urls for Act-On webforms specified here',
+    'fields' => array(
+      'id'  => array(
+        'type'     => 'serial',
+        'not null' => TRUE,
+      ),
+      'url' => array(
+        'type'        => 'varchar',
+        'not null'    => TRUE,
+        'length'      => 250,
+        'default'     => '',
+      ),
+    ),
+    'primary key' => array('id'),
+  );
+
+  // Webforms associated to Post URLs
+  $schema['acton_drupal_webforms'] = array(
+    'description' => 'Drupal webforms associated with Act-On post urls',
+    'fields' => array(
+      'nid'      => array(
+        'type'     => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+      ),
+      'url_id' => array(
+        'type'     => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+      ),
+    ),
+  );
+
+  // Webforms component Act On form item name mappings
+  $schema['acton_post_mapping'] = array(
+    'description' => 'Drupal webform component mappings to Act-On post form names',
+    'fields' => array(
+      'nid'      => array(
+        'type'     => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'unique'   => TRUE,
+      ),
+      'form_key' => array(
+        'type'        => 'varchar',
+        'not null'    => TRUE,
+        'length'      => 250,
+        'default'     => '',
+      ),
+      'mapped_name' => array(
+        'type'        => 'varchar',
+        'not null'    => TRUE,
+        'length'      => 250,
+        'default'     => '',
+      ),
+    ),
+  );
+
+  return $schema;
+}
diff --git a/acton.module b/acton.module
index b2a4173..e0827fd 100644
--- a/acton.module
+++ b/acton.module
@@ -43,118 +43,153 @@ function acton_form_alter(&$form, &$form_state, $form_id) {
     return;
   }
 
-  $uncollected_forms = array(
-    'user_login',
-    'user_login_block',
-    'search_form',
-    'search_block_form',
-    'views_exposed_form',
-    'acton_admin_form',
-  );
-
-  // If configured to capture all forms, add collection to every form.
-  if (variable_get('acton_capture_all_forms', 0) && !in_array($form_id, $uncollected_forms)) {
-    // Don't capture system forms - only admins should have access, and system
-    // forms may be programmatically submitted by drush and other modules.
-    if (strpos($form_id, 'system_') === FALSE && strpos($form_id, 'search_') === FALSE && strpos($form_id, 'views_exposed_form_') === FALSE) {
-      acton_add_form_capture($form, $form_state);
-    }
+  if ($form_id == 'webform_component_edit_form') {
+    $form['act-on-name'] = array(
+      '#type'           => 'textfield',
+      '#title'          => t('Act-On Mapping'),
+      '#description'    => t('This field will map to the name field of the Act-On form input, if left blank, the Field Key will be used.'),
+      '#weight'         => -3,
+      '#name'           => 'act-on-name',
+      '#default_value'  => acton_webform_component_get_mapped_name(
+        $form['nid']['#value'], 
+        $form['form_key']['#default_value']
+      ),
+    );
+    $form['#submit'][] = 'action_webform_component_edit_submit';
   }
 
-  // Otherwise add form capture to admin-configured forms.
-  elseif ($forms_to_capture = acton_get_captured_forms()) {
-    foreach ($forms_to_capture as $capture_form_id) {
-      // For most forms, do a straight check on the form ID.
-      if ($form_id == $capture_form_id) {
-        acton_add_form_capture($form, $form_state);
-      }
-      // For webforms use a special check for variable form ID.
-      elseif ($capture_form_id == 'webforms' && (strpos($form_id, 'webform_client_form') !== FALSE)) {
-        acton_add_form_capture($form, $form_state);
-      }
-    }
-  }
 }
 
 /**
- * Build an array of all the collected forms on the site, by form_id.
- *
+ * Implements hook_webform_submission_inser().
  */
-function acton_get_captured_forms() {
-  $forms = &drupal_static(__FUNCTION__);
-
-  // If the data isn't already in memory, get from cache or look it up fresh.
-  if (!isset($forms)) {
-    if ($cache = cache_get('acton_captured_forms')) {
-      $forms = $cache->data;
-    }
-    else {
-      // Look up all the honeypot forms in the variables table.
-      $result = db_query("SELECT name FROM {variable} WHERE name LIKE 'acton_form_%'")->fetchCol();
-      // Add each form that's enabled to the $forms array.
-      foreach ($result as $variable) {
-        if (variable_get($variable, 0)) {
-          $forms[] = substr($variable, 11);
+function acton_webform_submission_insert($node, $submission) {
+  // get all the post urls the node is associated to
+  $acton_connection = new ActonConnection();
+  $post_urls = acton_get_webform_post_urls($node->nid);
+  $post_data = array();
+
+  // format post data
+  if (count($post_urls)) {
+    if (!empty($node->webform['components'])) {
+      $fields = $node->webform['components'];
+      $data = $submission->data;
+      // map the submission data to the form 'name' components
+      for($i = 1; $i <= count($fields); $i++) {
+        // use the mapped name if it exists as act on form name value
+        $mapped_name = acton_webform_component_get_mapped_name($fields[$i]['nid'], $fields[$i]['form_key']);
+        if (!empty($mapped_name)) {
+          $acton_connection->setPostItems($mapped_name, filter_xss($data[$i][0]));
+        }
+        // otherwise use form_key as act on form name value
+        else {
+          $acton_connection->setPostItems($fields[$i]['form_key'], filter_xss($data[$i][0]));
         }
       }
-
-      // Save the cached data.
-      cache_set('acton_captured_forms', $forms, 'cache');
+    }
+    // loop each post url for this webform, and post to the post urls
+    foreach($post_urls as $post_url) {
+      $acton_connection->processConnection($post_url['url']);
     }
   }
-  return $forms;
 }
 
 /**
- * Form builder function to add  collection to forms.
- *
- * @return array
- *   Returns submit handler to be placed in a form's elements array.
+ * action_webform_component_get_mapped_name().
+ * @description 
+ *  gets the mapped name for a form component, based on the
+ *  form_key.
+ * @param String $nid
+ * @param String $form_key
+ * @return String
  */
-function acton_add_form_capture(&$form, &$form_state) {
-  global $user;
+function acton_webform_component_get_mapped_name($nid, $form_key='') {
+  $data = db_select('acton_post_mapping', 'pm')
+    ->fields('pm')
+    ->condition('nid', $nid, '=')
+    ->condition('form_key', $form_key, '=')
+    ->execute() 
+    ->fetchAssoc();
+
+  if($data && isset($data['mapped_name'])) {
+    return $data['mapped_name'];
+  }
 
-  $form['#submit'][] = 'acton_captured_forms_submit';
-  // Allow other modules to alter the collections applied to this form.
-  drupal_alter('acton_form_capture', $options, $form);
+  return '';
 }
 
+/**
+ * Implements hook_form_submit().
+ * @description
+ *  update the mapped value for Act-On
+ * @param &$form
+ * @param &$form_state
+ */
+function action_webform_component_edit_submit(&$form, &$form_state) {
+  $nid          = $form_state['values']['nid'];
+  $mapped_name  = $form_state['values']['act-on-name'];
+  $form_key     = $form_state['values']['form_key'];
+
+
+  if (!empty($mapped_name)) {
+    db_merge('acton_post_mapping')
+      ->key(array('nid' => $nid, 'form_key' => $form_key))
+      ->fields(array(
+        'nid'         => $nid,
+        'form_key'    => $form_key,
+        'mapped_name' => $mapped_name
+      ))
+      ->execute();
+  }
+  else {
+    db_delete('acton_post_mapping')
+      ->condition('nid', $nid, '=')
+      ->condition('form_key', $form_key, '=')
+      ->execute();
+  }
+}
 
 
 /**
- * Submit fields to acton.
+ * acton_get_webform_post_id().
+ * @description
+ *  get Post URL items for specified webform by webform nid
+ * @param String $nid
+ * @return Array
  */
-function acton_captured_forms_submit($form, &$form_state) {
-  $acton_submitter = new ActonConnection;
-  $flat_form = flatten_form_values($form_state['values']);
-
-  foreach ($flat_form as $key => $value) {
-    $acton_submitter->setPostItems($key, $value);
+function acton_get_webform_post_urls($nid) {
+  $urls = array();
+  $data = db_select('acton_drupal_webforms', 'wf')
+  ->fields('wf')
+  ->condition('nid', $nid, '=')
+  ->execute()
+  ->fetchAll();
+
+  foreach($data as $webform) {
+    $url_id = $webform->url_id;
+    $data = db_select('acton_post_url', 'wf')
+      ->fields('wf')
+      ->condition('id', $webform->url_id, '=')
+      ->execute()
+      ->fetchAssoc();
+    $urls[] = $data;
   }
 
-  if (variable_get("acton_debug", 0)){
-    $message = "Submitting to " . variable_get("acton_url", 0) . ": ";
-    foreach ($acton_submitter->getPostItems() as $key => $value) {
-      $message .= "<br />\"" . $key . "\" => " . $value . " ";
-    }
-    drupal_set_message($message,"status");
-  }
-  if (variable_get("acton_url", 0)) {
-    $acton_submitter->processConnection(variable_get("acton_url", 0));
-  } else {
-    drupal_set_message(l("Act-On url has not been set","admin/config/services/act-on"),"error");
-  }
+  return $urls;
 }
 
-function flatten_form_values($ar) {
-  $ritit = new RecursiveIteratorIterator(new RecursiveArrayIterator($ar));
-  $result = array();
-  foreach ($ritit as $leafValue) {
-    $keys = array();
-    foreach (range(0, $ritit->getDepth()) as $depth) {
-      $keys[] = $ritit->getSubIterator($depth)->key();
-    }
-    $result[ join('_', $keys) ] = $leafValue;
+/**
+ * Implements hook_node_delete().
+ * @description
+ *  cleans up any post mappings for a deleted webform
+ */
+function acton_node_delete($node) {
+
+  if ($node->type == 'webform') {
+    db_delete('acton_post_mapping')
+      ->condition('nid', $node->nid, '=')
+      ->execute();
   }
-  return $result;
-}
\ No newline at end of file
+
+}
+
