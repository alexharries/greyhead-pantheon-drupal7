diff --git a/adminrole.module b/adminrole.module
index 8f8037d..87ac2e2 100644
--- a/adminrole.module
+++ b/adminrole.module
@@ -1,4 +1,6 @@
 <?php
+// $Id: adminrole.module,v 1.2.2.8.2.11 2010/08/14 17:59:20 davereid Exp $
+
 /**
  * @file
  * This module simply gives a designated role all permissions every time the
@@ -25,7 +27,7 @@ function adminrole_form_user_admin_settings_alter(&$form, $form_state) {
     '#title' => t('Administrator role'),
     '#default_value' => variable_get('user_admin_role', 0),
     '#options' => array(0 => t('Disabled')) + $roles,
-    '#description' => t('This role will be automatically assigned new permissions whenever a module is enabled, field is added/updated or an entity is added/updated.'),
+    '#description' => t('This role will be automatically assign new permissions whenever a module is enabled, field is added/updated or entity is aded/updated.'),
   );
 }
 
@@ -47,7 +49,7 @@ function adminrole_node_type_update() {
 }
 function adminrole_field_update_field() {
   adminrole_update_permissions();
-}                
+}
 function adminrole_field_delete_field() {
   adminrole_update_permissions();
 }
@@ -67,33 +69,33 @@ function adminrole_update_permissions() {
   static $messaged;
   if ($rid = variable_get('user_admin_role', 0)) {
     foreach (module_implements('permission') as $module) {
-      foreach (module_invoke($module, 'permission') as $key => $perm) {
+      foreach(module_invoke($module, 'permission') as $key => $perm) {
         $perms[$key] = $module;
       }
     }
-        
+
     /*if ($excluded = variable_get('adminrole_exclude_permissions', array())) {
       $permissions = array_diff($permissions, $excluded);
     } */
-    
-    /** change from doing a DELETE ALL and INSERT to a MERGE which does insert/update as required
-    *     - no obvious performance hit doing this but there may be cases where we don't want to remove 
-    *     records that don't have a module assoicated with them (e.g. shared tables)
-    */
+
+    /** Reverted changes to  doing a DELETE ALL and INSERT from MERGE
+     *  Due to performance hit using MERGE
+     */
+
+    db_delete('role_permission')
+      ->condition('rid', $rid)
+      ->execute();
     if ($perms) {
-      foreach ($perms as $perm => $module) {
-        $query = db_merge('role_permission');
-        $query->key(array(
-          'rid' => $rid,
-          'permission' => $perm,
-        ));
-        $query->fields(array(
-          'rid' => $rid,
-          'permission' => $perm,
-          'module' => $module,
+      $query = db_insert('role_permission')
+        ->fields(array(
+          'rid',
+          'permission',
+          'module',
         ));
-        $query->execute();
+      foreach ($perms as $perm => $module) {
+        $query->values(array($rid, $perm, $module));
       }
+      $query->execute();
       $role = db_query("SELECT name FROM {role} WHERE rid = :rid", array(":rid" => $rid))->fetchField();
       if (!$messaged) {
         drupal_set_message(t("The <em>@role</em> role has been reset for all permissions.", array("@role" => $role)));
@@ -102,3 +104,4 @@ function adminrole_update_permissions() {
     }
   }
 }
+
